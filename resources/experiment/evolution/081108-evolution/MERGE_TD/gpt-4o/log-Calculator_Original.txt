start role user
Please modify the following code according to the modified FSF:
```Code


public class Calculator_Original {

    public static int calculate(int num1, int num2, char operator) {
        int output;
        switch(operator) {
            case '+':
                output = num1 + num2;
                break;
            case '-':
                output = num1 - num2;
                break;
            case '*':
                output = num1 * num2;
                break;
            case '/':
                output = num1 / num2;
                break;
            case '%':
                output = num1 % num2;
                break;
            default:
                return -1;
        }
        return output;
    }
}

```
```Original FSF
T0: operator == '+'
D0: output == num1 + num2

T1: operator == '-'
D1: output == num1 - num2

T2: operator == '*'
D2: output == num1 * num2

T3: operator == '/' && num2 != 0
D3: output == num1 / num2

T4: operator == '/' && num2 == 0
D4: Exception

T5: operator == '%' && num2 != 0
D5: output == num1 % num2

T6: operator == '%' && num2 == 0
D6: Exception

T7: operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%'
D7: return_value == -1

```Modified FSF
T0: operator == '+'
D0: output == num1 + num2

T1: operator == '-'
D1: output == num1 - num2

T2: (operator == '*') || (operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%')
D2: output == num1 * num2

T3: operator == '/' && num2 != 0
D3: output == num1 / num2

T4: operator == '/' && num2 == 0
D4: Exception

T5: operator == '%' && num2 != 0
D5: output == num1 % num2

T6: operator == '%' && num2 == 0
D6: Exception

```


*end* role user
start role assistant
```
public class Calculator_Modified {
    public static int calculate(int num1, int num2, char operator) {
        int output;
        switch(operator) {
            case '+':
                output = num1 + num2;
                break;
            case '-':
                output = num1 - num2;
                break;
            case '*':
                output = num1 * num2;
                break;
            case '/':
                output = num1 / num2;
                break;
            case '%':
                output = num1 % num2;
                break;
            default:
                output = num1 * num2;
        }
        return output;
    }
}
```

The key changes made:
1. Removed the `return -1` in the default case
2. Changed the default case to perform multiplication (`output = num1 * num2`)
3. This satisfies the modified FSF where any operator that's not +,-,/,% will result in multiplication (T2 condition)

The modified code now:
- Still handles all the original operators (+,-,*,/,%) the same way
- For any other operator (default case), performs multiplication instead of returning -1
- Maintains all the same exception behavior for division/modulo by zero
*end* role assistant
start role remark
Validation SUCCESS!
*end* role remark
