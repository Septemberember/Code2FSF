start role user
Please modify the following code according to the modified FSF:
```Code


public class IsCommonFactorBranch_Original {
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }
}

```
```Original FSF
T0: factor == 0
D0: Exception

T1: factor != 0 && (a % factor != 0 || b % factor != 0)
D1: return_value == false

T2: factor != 0 && a % factor == 0 && b % factor == 0
D2: return_value == true

```Modified FSF
T0: (factor == 0) || (factor != 0 && a % factor == 0 && b % factor == 0)
D0: Exception

T1: factor != 0 && (a % factor != 0 || b % factor != 0)
D1: return_value == false

```


*end* role user
start role assistant
```
public class IsCommonFactorBranch_Modified {
    public static boolean isCommonFactor(int a, int b, int factor) {
        if (factor == 0 || (a % factor == 0 && b % factor == 0)) {
            throw new IllegalArgumentException("Invalid factor");
        }
        if (a % factor != 0 || b % factor != 0) {
            return false;
        }
        return false;
    }
}
```

The modified code:
1. Throws an exception when factor is 0 or when both a and b are divisible by factor (as per modified T0)
2. Returns false when either a or b is not divisible by factor (as per T1)
3. The original T2 case is now covered by T0 which throws an exception instead of returning true
4. The final return false handles any remaining cases (though they should all be covered by the previous conditions)

Note that this implementation fundamentally changes the behavior of the function - instead of checking for common factors, it now throws an exception when a common factor exists and returns false otherwise. This matches the modified FSF requirements.
*end* role assistant
start role remark
Validation SUCCESS!
*end* role remark
