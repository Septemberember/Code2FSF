START ORIGINAL CODE

public class PowerOfTwoBranch_Original {

    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

*END* ORIGINAL CODE
START ORIGINAL FSF
T1: n <= 0
D1: return_value == false
T2: n > 0 && (n & (n - 1)) != 0
D2: return_value == false
T3: n > 0 && (n & (n - 1)) == 0
D3: return_value == true
*END* ORIGINAL FSF
START MODIFIED FSF
T1: n <= 0
D1: return_value == false
T2: (n > 0 && (n & (n - 1)) == 0) || (n > 0 && (n & (n - 1)) != 0)
D2: return_value == true
*END* MODIFIED FSF
START ORIGINAL CODE

public class PowerOfTwoBranch_Original {

    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

*END* ORIGINAL CODE
START ORIGINAL FSF
T1: n <= 0
D1: return_value == false
T2: n > 0 && (n & (n - 1)) != 0
D2: return_value == false
T3: n > 0 && (n & (n - 1)) == 0
D3: return_value == true
*END* ORIGINAL FSF
START MODIFIED FSF
T1: n > 0 && (n & (n - 1)) != 0
D1: return_value == false
T2: (n > 0 && (n & (n - 1)) == 0) || (n <= 0)
D2: return_value == true
*END* MODIFIED FSF
START ORIGINAL CODE

public class PowerOfTwoBranch_Original {

    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

*END* ORIGINAL CODE
START ORIGINAL FSF
T1: n <= 0
D1: return_value == false
T2: n > 0 && (n & (n - 1)) != 0
D2: return_value == false
T3: n > 0 && (n & (n - 1)) == 0
D3: return_value == true
*END* ORIGINAL FSF
START MODIFIED FSF
T1: (n <= 0) || (n > 0 && (n & (n - 1)) != 0)
D1: return_value == false
T2: n > 0 && (n & (n - 1)) == 0
D2: return_value == true
*END* MODIFIED FSF
START ORIGINAL CODE

public class PowerOfTwoBranch_Original {

    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

*END* ORIGINAL CODE
START ORIGINAL FSF
T1: n <= 0
D1: return_value == false
T2: n > 0 && (n & (n - 1)) != 0
D2: return_value == false
T3: n > 0 && (n & (n - 1)) == 0
D3: return_value == true
*END* ORIGINAL FSF
START MODIFIED FSF
T1: n > 0 && (n & (n - 1)) != 0
D1: return_value == false
T2: (n > 0 && (n & (n - 1)) == 0) || (n <= 0)
D2: return_value == true
*END* MODIFIED FSF
START ORIGINAL CODE

public class PowerOfTwoBranch_Original {

    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

*END* ORIGINAL CODE
START ORIGINAL FSF
T1: n <= 0
D1: return_value == false
T2: n > 0 && (n & (n - 1)) != 0
D2: return_value == false
T3: n > 0 && (n & (n - 1)) == 0
D3: return_value == true
*END* ORIGINAL FSF
START MODIFIED FSF
T1: n <= 0
D1: return_value == false
T2: (n > 0 && (n & (n - 1)) == 0) || (n > 0 && (n & (n - 1)) != 0)
D2: return_value == true
*END* MODIFIED FSF
START ORIGINAL CODE

public class PowerOfTwoBranch_Original {

    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

*END* ORIGINAL CODE
START ORIGINAL FSF
T1: n <= 0
D1: return_value == false
T2: n > 0 && (n & (n - 1)) != 0
D2: return_value == false
T3: n > 0 && (n & (n - 1)) == 0
D3: return_value == true
*END* ORIGINAL FSF
START MODIFIED FSF
T1: (n <= 0) || (n > 0 && (n & (n - 1)) != 0)
D1: return_value == false
T2: n > 0 && (n & (n - 1)) == 0
D2: return_value == true
*END* MODIFIED FSF
START ORIGINAL CODE

public class PowerOfTwoBranch_Original {

    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

*END* ORIGINAL CODE
START ORIGINAL FSF
T1: n <= 0
D1: return_value == false
T2: n > 0 && (n & (n - 1)) != 0
D2: return_value == false
T3: n > 0 && (n & (n - 1)) == 0
D3: return_value == true
*END* ORIGINAL FSF
START MODIFIED FSF
T1: (n > 0 && (n & (n - 1)) != 0) || (n <= 0)
D1: return_value == false
T2: n > 0 && (n & (n - 1)) == 0
D2: return_value == true
*END* MODIFIED FSF
START ORIGINAL CODE

public class PowerOfTwoBranch_Original {

    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

*END* ORIGINAL CODE
START ORIGINAL FSF
T1: n <= 0
D1: return_value == false
T2: n > 0 && (n & (n - 1)) != 0
D2: return_value == false
T3: n > 0 && (n & (n - 1)) == 0
D3: return_value == true
*END* ORIGINAL FSF
START MODIFIED FSF
T1: n <= 0
D1: return_value == false
T2: (n > 0 && (n & (n - 1)) == 0) || (n > 0 && (n & (n - 1)) != 0)
D2: return_value == true
*END* MODIFIED FSF
START ORIGINAL CODE

public class PowerOfTwoBranch_Original {

    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

*END* ORIGINAL CODE
START ORIGINAL FSF
T1: n <= 0
D1: return_value == false
T2: n > 0 && (n & (n - 1)) != 0
D2: return_value == false
T3: n > 0 && (n & (n - 1)) == 0
D3: return_value == true
*END* ORIGINAL FSF
START MODIFIED FSF
T1: n <= 0
D1: return_value == false
T2: (n > 0 && (n & (n - 1)) != 0) || (n > 0 && (n & (n - 1)) == 0)
D2: return_value == false
*END* MODIFIED FSF
START ORIGINAL CODE

public class PowerOfTwoBranch_Original {

    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

*END* ORIGINAL CODE
START ORIGINAL FSF
T1: n <= 0
D1: return_value == false
T2: n > 0 && (n & (n - 1)) != 0
D2: return_value == false
T3: n > 0 && (n & (n - 1)) == 0
D3: return_value == true
*END* ORIGINAL FSF
START MODIFIED FSF
T1: n <= 0
D1: return_value == false
T2: (n > 0 && (n & (n - 1)) != 0) || (n > 0 && (n & (n - 1)) == 0)
D2: return_value == false
*END* MODIFIED FSF
START ORIGINAL CODE

public class PowerOfTwoBranch_Original {

    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

*END* ORIGINAL CODE
START ORIGINAL FSF
T1: n <= 0
D1: return_value == false
T2: n > 0 && (n & (n - 1)) != 0
D2: return_value == false
T3: n > 0 && (n & (n - 1)) == 0
D3: return_value == true
*END* ORIGINAL FSF
START MODIFIED FSF
T1: n <= 0
D1: return_value == false
T2: (n > 0 && (n & (n - 1)) != 0) || (n > 0 && (n & (n - 1)) == 0)
D2: return_value == false
*END* MODIFIED FSF
START ORIGINAL CODE

public class PowerOfTwoBranch_Original {

    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

*END* ORIGINAL CODE
START ORIGINAL FSF
T1: n <= 0
D1: return_value == false
T2: n > 0 && (n & (n - 1)) != 0
D2: return_value == false
T3: n > 0 && (n & (n - 1)) == 0
D3: return_value == true
*END* ORIGINAL FSF
START MODIFIED FSF
T1: n <= 0
D1: return_value == false
T2: (n > 0 && (n & (n - 1)) != 0) || (n > 0 && (n & (n - 1)) == 0)
D2: return_value == false
*END* MODIFIED FSF
