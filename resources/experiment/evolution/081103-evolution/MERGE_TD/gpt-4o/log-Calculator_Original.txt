start role user
Please modify the following code according to the modified FSF:
```Code


public class Calculator_Original {

    public static int calculate(int num1, int num2, char operator) {
        int output;
        switch(operator) {
            case '+':
                output = num1 + num2;
                break;
            case '-':
                output = num1 - num2;
                break;
            case '*':
                output = num1 * num2;
                break;
            case '/':
                output = num1 / num2;
                break;
            case '%':
                output = num1 % num2;
                break;
            default:
                return -1;
        }
        return output;
    }
}

```
```Original FSF
T0: operator == '+'
D0: output == num1 + num2

T1: operator == '-'
D1: output == num1 - num2

T2: operator == '*'
D2: output == num1 * num2

T3: operator == '/' && num2 != 0
D3: output == num1 / num2

T4: operator == '/' && num2 == 0
D4: Exception

T5: operator == '%' && num2 != 0
D5: output == num1 % num2

T6: operator == '%' && num2 == 0
D6: Exception

T7: operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%'
D7: return_value == -1

```Modified FSF
T0: operator == '+'
D0: output == num1 + num2

T1: operator == '-'
D1: output == num1 - num2

T2: (operator == '*') || (operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%')
D2: output == num1 * num2

T3: operator == '/' && num2 != 0
D3: output == num1 / num2

T4: operator == '/' && num2 == 0
D4: Exception

T5: operator == '%' && num2 != 0
D5: output == num1 % num2

T6: operator == '%' && num2 == 0
D6: Exception

```


*end* role user
start role assistant
```
public class Calculator_Modified {
    public static int calculate(int num1, int num2, char operator) {
        int output;
        switch(operator) {
            case '+':
                output = num1 + num2;
                break;
            case '-':
                output = num1 - num2;
                break;
            case '/':
                output = num1 / num2;
                break;
            case '%':
                output = num1 % num2;
                break;
            default:
                output = num1 * num2;
        }
        return output;
    }
}
```

Key changes made:
1. Removed the return -1 in default case and replaced it with multiplication
2. Moved the multiplication case ('*') to be handled by the default case
3. Kept all other operations the same
4. The modified code now satisfies the new FSF where:
   - Multiplication happens either when operator is '*' OR when it's an invalid operator
   - All other operations remain unchanged
   - Division by zero and modulo by zero will still throw exceptions as in original

The modification is minimal and maintains the same structure while changing the behavior to match the new FSF requirements.
*end* role assistant
start role remark
Validation SUCCESS!
*end* role remark
