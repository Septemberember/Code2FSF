public class WindCompensation_Mutant2 {
    //@ ensures \result == 0 <==> windSpeed < 10;
    //@ ensures \result == windSpeed - 10 <==> 10 <= windSpeed && windSpeed < 20;
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}
==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:2:) in method windCompensation
        return compensation;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:2: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12:
    //@ ensures \result == 0 <==> windSpeed < 10;
        ^
2 verification failures

==============================
public class WindCompensation_Mutant2 {
    //@ ensures \result == 0 <==> windSpeed < 10;  
    //@ ensures \result == windSpeed - 10 <==> 10 <= windSpeed && windSpeed < 20;
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:2:) in method windCompensation
        return compensation;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:2: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12:
    //@ ensures \result == 0 <==> windSpeed < 10;  
        ^
2 verification failures

==============================
public class WindCompensation_Mutant2 {
    //@ ensures \result == 0 <==> windSpeed <= 10;  
    //@ ensures \result == windSpeed - 10 <==> 10 <= windSpeed && windSpeed < 20;
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:2:) in method windCompensation
        return compensation;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:2: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12:
    //@ ensures \result == 0 <==> windSpeed <= 10;  
        ^
2 verification failures

==============================
public class WindCompensation_Mutant2 {
 
    //@ ensures \result == windSpeed - 10 <==> 10 <= windSpeed && windSpeed < 20;
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3:) in method windCompensation
        return compensation;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12:
    //@ ensures \result == windSpeed - 10 <==> 10 <= windSpeed && windSpeed < 20;
        ^
2 verification failures

==============================
public class WindCompensation_Mutant2 {
 
    //@ ensures \result == windSpeed - 10 <==> 10 < windSpeed && windSpeed < 20;  
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3:) in method windCompensation
        return compensation;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12:
    //@ ensures \result == windSpeed - 10 <==> 10 < windSpeed && windSpeed < 20;  
        ^
2 verification failures

==============================
public class WindCompensation_Mutant2 {
 
    //@ ensures \result == windSpeed - 10 <==> 10 < windSpeed && windSpeed <= 20;  
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3:) in method windCompensation
        return compensation;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12:
    //@ ensures \result == windSpeed - 10 <==> 10 < windSpeed && windSpeed <= 20;  
        ^
2 verification failures

==============================
public class WindCompensation_Mutant2 {
 
    //@ ensures \result == windSpeed - 10 <==> 10 <= windSpeed && windSpeed < 20;  
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3:) in method windCompensation
        return compensation;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12:
    //@ ensures \result == windSpeed - 10 <==> 10 <= windSpeed && windSpeed < 20;  
        ^
2 verification failures

==============================
public class WindCompensation_Mutant2 {
 
    //@ ensures \result == windSpeed - 10 <==> 10 <= windSpeed && windSpeed <= 20;  
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3:) in method windCompensation
        return compensation;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12:
    //@ ensures \result == windSpeed - 10 <==> 10 <= windSpeed && windSpeed <= 20;  
        ^
2 verification failures

==============================
public class WindCompensation_Mutant2 {
 
    //@ ensures \result == windSpeed - 10 <==> 10 - 1 <= windSpeed && windSpeed < 20;  
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3:) in method windCompensation
        return compensation;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12:
    //@ ensures \result == windSpeed - 10 <==> 10 - 1 <= windSpeed && windSpeed < 20;  
        ^
2 verification failures

==============================
public class WindCompensation_Mutant2 {
 
    //@ ensures \result == windSpeed - 10 <==> 10 - 1 <= windSpeed && windSpeed <= 20;  
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3:) in method windCompensation
        return compensation;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12:
    //@ ensures \result == windSpeed - 10 <==> 10 - 1 <= windSpeed && windSpeed <= 20;  
        ^
2 verification failures

==============================
public class WindCompensation_Mutant2 {
 
    //@ ensures \result == windSpeed + 10 <==> 10 < windSpeed && windSpeed < 20;  
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3:) in method windCompensation
        return compensation;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12:
    //@ ensures \result == windSpeed + 10 <==> 10 < windSpeed && windSpeed < 20;  
        ^
2 verification failures

==============================
public class WindCompensation_Mutant2 {
 
    //@ ensures \result == windSpeed + 10 <==> 10 < windSpeed && windSpeed <= 20;  
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3:) in method windCompensation
        return compensation;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12:
    //@ ensures \result == windSpeed + 10 <==> 10 < windSpeed && windSpeed <= 20;  
        ^
2 verification failures

==============================
public class WindCompensation_Mutant2 {
 
    //@ ensures \result == windSpeed + 10 <==> 10 <= windSpeed && windSpeed < 20;  
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3:) in method windCompensation
        return compensation;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12:
    //@ ensures \result == windSpeed + 10 <==> 10 <= windSpeed && windSpeed < 20;  
        ^
2 verification failures

==============================
public class WindCompensation_Mutant2 {
 
    //@ ensures \result == windSpeed + 10 <==> 10 <= windSpeed && windSpeed <= 20;  
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3:) in method windCompensation
        return compensation;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12:
    //@ ensures \result == windSpeed + 10 <==> 10 <= windSpeed && windSpeed <= 20;  
        ^
2 verification failures

==============================
public class WindCompensation_Mutant2 {
 
    //@ ensures \result == windSpeed + 10 <==> 10 - 1 <= windSpeed && windSpeed < 20;  
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3:) in method windCompensation
        return compensation;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12:
    //@ ensures \result == windSpeed + 10 <==> 10 - 1 <= windSpeed && windSpeed < 20;  
        ^
2 verification failures

==============================
public class WindCompensation_Mutant2 {
 
    //@ ensures \result == windSpeed + 10 <==> 10 - 1 <= windSpeed && windSpeed <= 20;  
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3:) in method windCompensation
        return compensation;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/WindCompensation_Mutant2.java:12:
    //@ ensures \result == windSpeed + 10 <==> 10 - 1 <= windSpeed && windSpeed <= 20;  
        ^
2 verification failures

==============================
public class WindCompensation_Mutant2 {
 
 
    //@ ensures \result == (windSpeed - 20) * 2 <==> windSpeed >= 20;
    public static int windCompensation(int windSpeed) {
        int compensation = 0;
        if (windSpeed >= 20) {
            compensation = (windSpeed - 20) * 2;
        } else if (windSpeed > 10) {
            compensation = windSpeed - 10;
        }
        return compensation;
    }
}

==============================

==============================
