public class SmallestEvenMulBranch_Mutant3 {
    //@ requires n >= 0;
    //@ ensures \result % 2 == 0;
    //@ ensures (\result == n && n % 2 != 0) || (\result == 2*n && n % 2 == 0);
    public static int smallestEvenMultiple(int n) {
        if (n % 2 != 0) {
            return n;
        }
        return 2 * n;
    }
}
==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/SmallestEvenMulBranch_Mutant3.java:7: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/SmallestEvenMulBranch_Mutant3.java:3:) in method smallestEvenMultiple
            return n;
            ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/SmallestEvenMulBranch_Mutant3.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/SmallestEvenMulBranch_Mutant3.java:7:
    //@ ensures \result % 2 == 0;
        ^
2 verification failures

==============================
public class SmallestEvenMulBranch_Mutant3 {
    //@ requires n >= 0;
    //@ ensures \result % 2 == 0;  
    //@ ensures (\result == n && n % 2 != 0) || (\result == 2*n && n % 2 == 0);
    public static int smallestEvenMultiple(int n) {
        if (n % 2 != 0) {
            return n;
        }
        return 2 * n;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/SmallestEvenMulBranch_Mutant3.java:7: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/SmallestEvenMulBranch_Mutant3.java:3:) in method smallestEvenMultiple
            return n;
            ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/SmallestEvenMulBranch_Mutant3.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/SmallestEvenMulBranch_Mutant3.java:7:
    //@ ensures \result % 2 == 0;  
        ^
2 verification failures

==============================
public class SmallestEvenMulBranch_Mutant3 {
    //@ requires n >= 0;
 
    //@ ensures (\result == n && n % 2 != 0) || (\result == 2*n && n % 2 == 0);
    public static int smallestEvenMultiple(int n) {
        if (n % 2 != 0) {
            return n;
        }
        return 2 * n;
    }
}

==============================

==============================
