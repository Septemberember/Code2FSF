public class MulLoop_Mutant3 {
    /*@ spec_public */ public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == \old(res) - i * a;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res - a;  // changed the operator from + to -
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == \old(res) + i * a;
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res + a;  // changed the operator from - to +
            }
        }
        return res;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant3.java:6: error: cannot find symbol
            //@ maintaining res == \old(res) - i * a;
                                        ^
  symbol:   variable res
  location: class MulLoop_Mutant3
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant3.java:13: error: cannot find symbol
            //@ maintaining res == \old(res) + i * a;
                                        ^
  symbol:   variable res
  location: class MulLoop_Mutant3
2 errors

==============================
public class MulLoop_Mutant3 {
    /*@ spec_public */ public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == \old(res) - i * a;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res - a;  // changed the operator from + to -
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == \old(res) + i * a;
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res + a;  // changed the operator from - to +
            }
        }
        return res;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant3.java:6: error: cannot find symbol
            //@ maintaining res == \old(res) - i * a;
                                        ^
  symbol:   variable res
  location: class MulLoop_Mutant3
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant3.java:13: error: cannot find symbol
            //@ maintaining res == \old(res) + i * a;
                                        ^
  symbol:   variable res
  location: class MulLoop_Mutant3
2 errors

==============================
public class MulLoop_Mutant3 {
    /*@ spec_public */ public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == 0 - i * a;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res - a;  // changed the operator from + to -
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == 0 + i * a;
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res + a;  // changed the operator from - to +
            }
        }
        return res;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant3.java:6: verify: The prover cannot establish an assertion (LoopInvariant) in method mulLoop
            //@ maintaining res == 0 - i * a;
                ^
1 verification failure

==============================
public class MulLoop_Mutant3 {
    /*@ spec_public */ public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == 0 - i * a;  
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res - a;  // changed the operator from + to -
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == 0 + i * a;
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res + a;  // changed the operator from - to +
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant3.java:6: verify: The prover cannot establish an assertion (LoopInvariant) in method mulLoop
            //@ maintaining res == 0 - i * a;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant3 {
    /*@ spec_public */ public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == 0 + i * a;  
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res - a;  // changed the operator from + to -
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == 0 + i * a;
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res + a;  // changed the operator from - to +
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant3.java:6: verify: The prover cannot establish an assertion (LoopInvariant) in method mulLoop
            //@ maintaining res == 0 + i * a;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant3 {
    /*@ spec_public */ public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
 
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res - a;  // changed the operator from + to -
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == 0 + i * a;
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res + a;  // changed the operator from - to +
            }
        }
        return res;
    }
}

==============================

==============================
