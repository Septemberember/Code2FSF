public class Return100_Mutant2 {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        int i = 0;
        //@ maintaining res == i && 0 <= i && i <= 100;
        //@ decreases 100 - i;
        for(i = 0; i <= 100; i++) { // CHANGED: condition changed to <=
            res = res + 1;
        }
        return res;
    }
}
==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/Return100_Mutant2.java:6: verify: The prover cannot establish an assertion (LoopInvariant) in method return100
        //@ maintaining res == i && 0 <= i && i <= 100;
            ^
1 verification failure

==============================
public class Return100_Mutant2 {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        int i = 0;
        //@ maintaining res == i && 0 < i && i < 100;  
        //@ decreases 100 - i;
        for(i = 0; i <= 100; i++) { // CHANGED: condition changed to <=
            res = res + 1;
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/Return100_Mutant2.java:6: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method return100
        //@ maintaining res == i && 0 < i && i < 100;  
            ^
1 verification failure

==============================
public class Return100_Mutant2 {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        int i = 0;
        //@ maintaining res == i && 0 < i && i <= 100;  
        //@ decreases 100 - i;
        for(i = 0; i <= 100; i++) { // CHANGED: condition changed to <=
            res = res + 1;
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/Return100_Mutant2.java:6: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method return100
        //@ maintaining res == i && 0 < i && i <= 100;  
            ^
1 verification failure

==============================
public class Return100_Mutant2 {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        int i = 0;
        //@ maintaining res == i && 0 < i && i - 1 <= 100;  
        //@ decreases 100 - i;
        for(i = 0; i <= 100; i++) { // CHANGED: condition changed to <=
            res = res + 1;
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/Return100_Mutant2.java:6: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method return100
        //@ maintaining res == i && 0 < i && i - 1 <= 100;  
            ^
1 verification failure

==============================
public class Return100_Mutant2 {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        int i = 0;
        //@ maintaining res == i && 0 <= i && i < 100;  
        //@ decreases 100 - i;
        for(i = 0; i <= 100; i++) { // CHANGED: condition changed to <=
            res = res + 1;
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/Return100_Mutant2.java:6: verify: The prover cannot establish an assertion (LoopInvariant) in method return100
        //@ maintaining res == i && 0 <= i && i < 100;  
            ^
1 verification failure

==============================
public class Return100_Mutant2 {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        int i = 0;
        //@ maintaining res == i && 0 <= i && i <= 100;  
        //@ decreases 100 - i;
        for(i = 0; i <= 100; i++) { // CHANGED: condition changed to <=
            res = res + 1;
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/Return100_Mutant2.java:6: verify: The prover cannot establish an assertion (LoopInvariant) in method return100
        //@ maintaining res == i && 0 <= i && i <= 100;  
            ^
1 verification failure

==============================
public class Return100_Mutant2 {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        int i = 0;
        //@ maintaining res == i && 0 <= i && i - 1 <= 100;  
        //@ decreases 100 - i;
        for(i = 0; i <= 100; i++) { // CHANGED: condition changed to <=
            res = res + 1;
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/Return100_Mutant2.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/Return100_Mutant2.java:2:) in method return100
        return res;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/Return100_Mutant2.java:2: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/Return100_Mutant2.java:11:
    //@ ensures \result == 100;
        ^
2 verification failures

==============================
public class Return100_Mutant2 {
    //@ ensures \result == 100;  
    public static int return100 () {
        int res = 0;
        int i = 0;
        //@ maintaining res == i && 0 <= i && i - 1 <= 100;  
        //@ decreases 100 - i;
        for(i = 0; i <= 100; i++) { // CHANGED: condition changed to <=
            res = res + 1;
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/Return100_Mutant2.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/Return100_Mutant2.java:2:) in method return100
        return res;
        ^
/root/specgen/SpecGen/project/082601-gpt-specgen/tmp/Return100_Mutant2.java:2: verify: Associated declaration: /root/specgen/SpecGen/project/082601-gpt-specgen/tmp/Return100_Mutant2.java:11:
    //@ ensures \result == 100;  
        ^
2 verification failures

==============================
public class Return100_Mutant2 {
 
    public static int return100 () {
        int res = 0;
        int i = 0;
        //@ maintaining res == i && 0 <= i && i - 1 <= 100;  
        //@ decreases 100 - i;
        for(i = 0; i <= 100; i++) { // CHANGED: condition changed to <=
            res = res + 1;
        }
        return res;
    }
}

==============================

==============================
