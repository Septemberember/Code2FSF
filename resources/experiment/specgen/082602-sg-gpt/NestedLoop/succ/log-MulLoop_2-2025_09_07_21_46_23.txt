public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b - a * (-b - i) && 0 <= i && i <= -b;
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b - a * (-b - i) && 0 <= i && i <= -b;
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b - a * (-b - i) && 0 < i && i < -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b - a * (-b - i) && 0 < i && i < -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b - a * (-b - i) && 0 < i && i <= -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b - a * (-b - i) && 0 < i && i <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b - a * (-b - i) && 0 < i && i - 1 <= -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b - a * (-b - i) && 0 < i && i - 1 <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b - a * (-b - i) && 0 <= i && i < -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b - a * (-b - i) && 0 <= i && i < -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b - a * (-b - i) && 0 <= i && i <= -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b - a * (-b - i) && 0 <= i && i <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b - a * (-b - i) && 0 <= i && i - 1 <= -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b - a * (-b - i) && 0 <= i && i - 1 <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b - a * (-b - i) && 0 - 1 <= i && i < -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b - a * (-b - i) && 0 - 1 <= i && i < -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b - a * (-b - i) && 0 - 1 <= i && i <= -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b - a * (-b - i) && 0 - 1 <= i && i <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b - a * (-b - i) && 0 - 1 <= i && i - 1 <= -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b - a * (-b - i) && 0 - 1 <= i && i - 1 <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b + a * (-b + i) && 0 < i && i < -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b + a * (-b + i) && 0 < i && i < -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b + a * (-b + i) && 0 < i && i <= -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b + a * (-b + i) && 0 < i && i <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b + a * (-b + i) && 0 < i && i - 1 <= -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b + a * (-b + i) && 0 < i && i - 1 <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b + a * (-b + i) && 0 <= i && i < -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b + a * (-b + i) && 0 <= i && i < -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b + a * (-b + i) && 0 <= i && i <= -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method mulLoop
            //@ maintaining res == a * b + a * (-b + i) && 0 <= i && i <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b + a * (-b + i) && 0 <= i && i - 1 <= -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method mulLoop
            //@ maintaining res == a * b + a * (-b + i) && 0 <= i && i - 1 <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b + a * (-b + i) && 0 - 1 <= i && i < -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b + a * (-b + i) && 0 - 1 <= i && i < -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b + a * (-b + i) && 0 - 1 <= i && i <= -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method mulLoop
            //@ maintaining res == a * b + a * (-b + i) && 0 - 1 <= i && i <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b + a * (-b + i) && 0 - 1 <= i && i - 1 <= -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method mulLoop
            //@ maintaining res == a * b + a * (-b + i) && 0 - 1 <= i && i - 1 <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b + a * (-b - i) && 0 < i && i < -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b + a * (-b - i) && 0 < i && i < -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b + a * (-b - i) && 0 < i && i <= -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b + a * (-b - i) && 0 < i && i <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b + a * (-b - i) && 0 < i && i - 1 <= -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b + a * (-b - i) && 0 < i && i - 1 <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b + a * (-b - i) && 0 <= i && i < -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant2.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining res == a * b + a * (-b - i) && 0 <= i && i < -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant2 {
    //@ requires Integer.MIN_VALUE <= a * b && a * b <= Integer.MAX_VALUE && b != Integer.MIN_VALUE;
    //@ ensures \result == a * b;
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b > 0) {
            //@ maintaining res == a * b - a * (b - i) && 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res + a;
            }
        } else {
            //@ maintaining res == a * b + a * (-b - i) && 0 <= i && i <= -b;  
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res - a;
            }
        }
        return res;
    }
}

==============================

==============================
