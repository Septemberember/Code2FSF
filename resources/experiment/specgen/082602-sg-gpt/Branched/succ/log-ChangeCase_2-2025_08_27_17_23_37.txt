public class ChangeCase_Mutant2 {
    //@ ensures result == c ==> (c <= 'Z' && c >= 'A') || (c > 'z');
    //@ ensures result == (char)(c - 'a' + 'A') ==> c >= 'a' && c <= 'z';
    //@ ensures result == c ==> (c <= 'Z' && c >= 'A') || (c > 'z');
    //@ ensures result == (char)(c - 'A' + 'a') ==> c >= 'A' && c <= 'Z';
    public static char changeCase(char c) {
        char result;
        if (c > 'z') {
            result = c;
        } else if (c >= 'a') {
            result = (char) (c - 'a' + 'A');
        } else if (c > 'Z') {
            result = c;
        } else if (c >= 'A') {
            result = (char) (c - 'A' + 'a');
        } else {
            result = c;
        }
        return result;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/ChangeCase_Mutant2.java:2: error: cannot find symbol
    //@ ensures result == c ==> (c <= 'Z' && c >= 'A') || (c > 'z');
                ^
  symbol:   variable result
  location: class ChangeCase_Mutant2
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/ChangeCase_Mutant2.java:3: error: cannot find symbol
    //@ ensures result == (char)(c - 'a' + 'A') ==> c >= 'a' && c <= 'z';
                ^
  symbol:   variable result
  location: class ChangeCase_Mutant2
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/ChangeCase_Mutant2.java:4: error: cannot find symbol
    //@ ensures result == c ==> (c <= 'Z' && c >= 'A') || (c > 'z');
                ^
  symbol:   variable result
  location: class ChangeCase_Mutant2
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/ChangeCase_Mutant2.java:5: error: cannot find symbol
    //@ ensures result == (char)(c - 'A' + 'a') ==> c >= 'A' && c <= 'Z';
                ^
  symbol:   variable result
  location: class ChangeCase_Mutant2
4 errors

==============================
public class ChangeCase_Mutant2 {
    //@ ensures \result == c ==> (c <= 'Z' && c >= 'A') || (c > 'z');
    //@ ensures \result == (char)(c - 'a' + 'A') ==> c >= 'a' && c <= 'z';
    //@ ensures \result == c ==> (c <= 'Z' && c >= 'A') || (c > 'z');
    //@ ensures \result == (char)(c - 'A' + 'a') ==> c >= 'A' && c <= 'Z';
    public static char changeCase(char c) {
        char result;
        if (c > 'z') {
            result = c;
        } else if (c >= 'a') {
            result = (char) (c - 'a' + 'A');
        } else if (c > 'Z') {
            result = c;
        } else if (c >= 'A') {
            result = (char) (c - 'A' + 'a');
        } else {
            result = c;
        }
        return result;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/ChangeCase_Mutant2.java:5: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method changeCase
    //@ ensures \result == (char)(c - 'A' + 'a') ==> c >= 'A' && c <= 'Z';
                           ^
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/ChangeCase_Mutant2.java:19: verify: Associated method exit
        return result;
        ^
2 verification failures

==============================
public class ChangeCase_Mutant2 {
    //@ ensures \result == c ==> (c <= 'Z' && c >= 'A') || (c > 'z');
    //@ ensures \result == (char)(c - 'a' + 'A') ==> c >= 'a' && c <= 'z';
    //@ ensures \result == c ==> (c <= 'Z' && c >= 'A') || (c > 'z');
    //@ ensures \result == (char)(c - 'A' + 'a') ==> c >= 'A' && c <= 'Z';
    public static char changeCase(char c) {
        char result;
        if (c > 'z') {
            result = c;
        } else if (c >= 'a') {
            result = (char) (c - 'a' + 'A');
        } else if (c > 'Z') {
            result = c;
        } else if (c >= 'A') {
            result = (char) (c - 'A' + 'a');
        } else {
            result = c;
        }
        return result;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/ChangeCase_Mutant2.java:5: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method changeCase
    //@ ensures \result == (char)(c - 'A' + 'a') ==> c >= 'A' && c <= 'Z';
                           ^
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/ChangeCase_Mutant2.java:19: verify: Associated method exit
        return result;
        ^
2 verification failures

==============================
public class ChangeCase_Mutant2 {
    //@ ensures \result == c ==> (c <= 'Z' && c >= 'A') || (c > 'z');
    //@ ensures \result == (char)(c - 'a' + 'A') ==> c >= 'a' && c <= 'z';
    //@ ensures \result == c ==> (c <= 'Z' && c >= 'A') || (c > 'z');
    //@ ensures \result == (char)(c - 'A' + 'a') ==> c >= 'A' && c <= 'Z';
    public static char changeCase(char c) {
        char result;
        if (c > 'z') {
            result = c;
        } else if (c >= 'a') {
            result = (char) (c - 'a' + 'A');
        } else if (c > 'Z') {
            result = c;
        } else if (c >= 'A') {
            result = (char) (c - 'A' + 'a');
        } else {
            result = c;
        }
        return result;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/ChangeCase_Mutant2.java:5: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method changeCase
    //@ ensures \result == (char)(c - 'A' + 'a') ==> c >= 'A' && c <= 'Z';
                           ^
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/ChangeCase_Mutant2.java:19: verify: Associated method exit
        return result;
        ^
2 verification failures

==============================
public class ChangeCase_Mutant2 {
    //@ ensures \result == c ==> (c <= 'Z' && c >= 'A') || (c > 'z');
    //@ ensures \result == (char)(c - 'a' + 'A') ==> c >= 'a' && c <= 'z';
    //@ ensures \result == c ==> (c <= 'Z' && c >= 'A') || (c > 'z');
    //@ ensures \result == (char)(c - 'A' + 'a') ==> c >= 'A' && c <= 'Z';
    public static char changeCase(char c) {
        char result;
        if (c > 'z') {
            result = c;
        } else if (c >= 'a') {
            result = (char) (c - 'a' + 'A');
        } else if (c > 'Z') {
            result = c;
        } else if (c >= 'A') {
            result = (char) (c - 'A' + 'a');
        } else {
            result = c;
        }
        return result;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/ChangeCase_Mutant2.java:5: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method changeCase
    //@ ensures \result == (char)(c - 'A' + 'a') ==> c >= 'A' && c <= 'Z';
                           ^
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/ChangeCase_Mutant2.java:19: verify: Associated method exit
        return result;
        ^
2 verification failures

==============================
public class ChangeCase_Mutant2 {
    //@ ensures \result == c ==> (c <= 'Z' && c >= 'A') || (c > 'z');
    //@ ensures \result == (char)(c - 'a' + 'A') ==> c >= 'a' && c <= 'z';
    //@ ensures \result == c ==> (c <= 'Z' && c >= 'A') || (c > 'z');
    //@ ensures \result == (char)(c - 'A' + 'a') ==> c >= 'A' && c <= 'Z';
    public static char changeCase(char c) {
        char result;
        if (c > 'z') {
            result = c;
        } else if (c >= 'a') {
            result = (char) (c - 'a' + 'A');
        } else if (c > 'Z') {
            result = c;
        } else if (c >= 'A') {
            result = (char) (c - 'A' + 'a');
        } else {
            result = c;
        }
        return result;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/ChangeCase_Mutant2.java:5: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method changeCase
    //@ ensures \result == (char)(c - 'A' + 'a') ==> c >= 'A' && c <= 'Z';
                           ^
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/ChangeCase_Mutant2.java:19: verify: Associated method exit
        return result;
        ^
2 verification failures

==============================
public class ChangeCase_Mutant2 {
    //@ ensures \result == c ==> (c <= 'Z' && c >= 'A') || (c > 'z');
    //@ ensures \result == (char)(c - 'a' + 'A') ==> c >= 'a' && c <= 'z';
    //@ ensures \result == c ==> (c <= 'Z' && c >= 'A') || (c > 'z');
    //@ ensures \result == (char)(c - 'A' + 'a') ==> c >= 'A' && c <= 'Z';
    public static char changeCase(char c) {
        char result;
        if (c > 'z') {
            result = c;
        } else if (c >= 'a') {
            result = (char) (c - 'a' + 'A');
        } else if (c > 'Z') {
            result = c;
        } else if (c >= 'A') {
            result = (char) (c - 'A' + 'a');
        } else {
            result = c;
        }
        return result;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/ChangeCase_Mutant2.java:5: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method changeCase
    //@ ensures \result == (char)(c - 'A' + 'a') ==> c >= 'A' && c <= 'Z';
                           ^
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/ChangeCase_Mutant2.java:19: verify: Associated method exit
        return result;
        ^
2 verification failures

==============================
public class ChangeCase_Mutant2 {
    //@ requires (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
    //@ ensures \result == (char)(c ^ ' ');
    public static char changeCase(char c) {
        return (char) (c ^ ' ');
    }
}
==============================

==============================
