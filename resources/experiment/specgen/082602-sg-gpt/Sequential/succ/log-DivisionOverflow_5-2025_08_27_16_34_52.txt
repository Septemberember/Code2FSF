public class DivisionOverflow_Mutant5 {
    //@ ensures \result == denom / nom;
    public static int division_test_fail_overflow(int nom, int denom) {
        //~should_fail
        int tmp = denom / nom; // swapping numerator and denominator
        return tmp;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/DivisionOverflow_Mutant5.java:5: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method division_test_fail_overflow
        int tmp = denom / nom; // swapping numerator and denominator
                        ^
1 verification failure

==============================
public class DivisionOverflow_Mutant5 {
    //@ ensures \result == denom / nom;
    //@ assume Integer.MIN_VALUE <= denom / nom && denom / nom <= Integer.MAX_VALUE;
    public static int division_test_fail_overflow(int nom, int denom) {
        //~should_fail
        int tmp = denom / nom; // swapping numerator and denominator
        return tmp;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/DivisionOverflow_Mutant5.java:3: error: The token assume is illegal or not implemented for a type or method clause (JmlParser.classOrInterfaceBodyDeclaration)
    //@ assume Integer.MIN_VALUE <= denom / nom && denom / nom <= Integer.MAX_VALUE;
        ^
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/DivisionOverflow_Mutant5.java:2: error: Method specifications without a following method declaration
    //@ ensures \result == denom / nom;
        ^
2 errors

==============================
public class DivisionOverflow_Mutant5 {
    //@ ensures \result == denom / nom;
    public static int division_test_fail_overflow(int nom, int denom) {
        //~should_fail
        int tmp = denom / nom; // swapping numerator and denominator
        return tmp;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/DivisionOverflow_Mutant5.java:5: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method division_test_fail_overflow
        int tmp = denom / nom; // swapping numerator and denominator
                        ^
1 verification failure

==============================
public class DivisionOverflow_Mutant5 {
    //@ ensures \result == denom / nom;
    //@ assume Integer.MIN_VALUE <= denom / nom && denom / nom <= Integer.MAX_VALUE;
    public static int division_test_fail_overflow(int nom, int denom) {
        //~should_fail
        int tmp = denom / nom; // swapping numerator and denominator
        return tmp;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/DivisionOverflow_Mutant5.java:3: error: The token assume is illegal or not implemented for a type or method clause (JmlParser.classOrInterfaceBodyDeclaration)
    //@ assume Integer.MIN_VALUE <= denom / nom && denom / nom <= Integer.MAX_VALUE;
        ^
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/DivisionOverflow_Mutant5.java:2: error: Method specifications without a following method declaration
    //@ ensures \result == denom / nom;
        ^
2 errors

==============================
public class DivisionOverflow_Mutant5 {
    //@ ensures \result == denom / nom;
    //@ ensures Integer.MIN_VALUE <= \result && \result <= Integer.MAX_VALUE;
    public static int division_test_fail_overflow(int nom, int denom) {
        //~should_fail
        int tmp = denom / nom; // swapping numerator and denominator
        return tmp;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/DivisionOverflow_Mutant5.java:6: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method division_test_fail_overflow
        int tmp = denom / nom; // swapping numerator and denominator
                        ^
1 verification failure

==============================
public class DivisionOverflow_Mutant5 {
    //@ ensures \result == denom / nom;
    //@ ensures Integer.MIN_VALUE <= \result && \result <= Integer.MAX_VALUE;
    //@ assume Integer.MIN_VALUE <= denom / nom && denom / nom <= Integer.MAX_VALUE;
    public static int division_test_fail_overflow(int nom, int denom) {
        //~should_fail
        int tmp = denom / nom; // swapping numerator and denominator
        return tmp;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/DivisionOverflow_Mutant5.java:4: error: The token assume is illegal or not implemented for a type or method clause (JmlParser.classOrInterfaceBodyDeclaration)
    //@ assume Integer.MIN_VALUE <= denom / nom && denom / nom <= Integer.MAX_VALUE;
        ^
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/DivisionOverflow_Mutant5.java:2: error: Method specifications without a following method declaration
    //@ ensures \result == denom / nom;
        ^
2 errors

==============================
public class DivisionOverflow_Mutant5 {
    //@ ensures \result == denom / nom;
    //@ ensures Integer.MIN_VALUE <= \result && \result <= Integer.MAX_VALUE;
    //@ assignable \nothing;
    public static int division_test_fail_overflow(int nom, int denom) {
        //~should_fail
        int tmp = denom / nom; // swapping numerator and denominator
        return tmp;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/DivisionOverflow_Mutant5.java:7: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method division_test_fail_overflow
        int tmp = denom / nom; // swapping numerator and denominator
                        ^
1 verification failure

==============================
public class DivisionOverflow_Mutant5 {
    //@ ensures \result == denom / nom;
    //@ ensures Integer.MIN_VALUE <= \result && \result <= Integer.MAX_VALUE;
    //@ assignable \nothing;
    //@ assume nom != 0;
    public static int division_test_fail_overflow(int nom, int denom) {
        //~should_fail
        int tmp = denom / nom; // swapping numerator and denominator
        return tmp;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/DivisionOverflow_Mutant5.java:5: error: The token assume is illegal or not implemented for a type or method clause (JmlParser.classOrInterfaceBodyDeclaration)
    //@ assume nom != 0;
        ^
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/DivisionOverflow_Mutant5.java:2: error: Method specifications without a following method declaration
    //@ ensures \result == denom / nom;
        ^
2 errors

==============================
public class DivisionOverflow_Mutant5 {
    //@ ensures \result == denom / nom;
    //@ ensures Integer.MIN_VALUE <= \result && \result <= Integer.MAX_VALUE;
    //@ assignable \nothing;
    //@ requires nom != 0;
    public static int division_test_fail_overflow(int nom, int denom) {
        //~should_fail
        int tmp = denom / nom; // swapping numerator and denominator
        return tmp;
    }
}
==============================

==============================
