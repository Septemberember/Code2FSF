public class MulLoop_Mutant3 {
    /*@ spec_public @*/ public static int mulLoop(int a, int b) {
        int res = 0;
        //@ ensures \result == a * b;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res - a;  // changed the operator from + to -
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res + a;  // changed the operator from - to +
            }
        }
        return res;
    }
}
==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant3.java:4: verify: The prover cannot establish an assertion (Postcondition) in method mulLoop
        //@ ensures \result == a * b;
            ^
1 verification failure

==============================
public class MulLoop_Mutant3 {
    /*@ spec_public @*/ public static int mulLoop(int a, int b) {
        int res = 0;
        //@ ensures \result == a * b;  
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res - a;  // changed the operator from + to -
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res + a;  // changed the operator from - to +
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/082602-gpt-specgen/tmp/MulLoop_Mutant3.java:4: verify: The prover cannot establish an assertion (Postcondition) in method mulLoop
        //@ ensures \result == a * b;  
            ^
1 verification failure

==============================
public class MulLoop_Mutant3 {
    /*@ spec_public @*/ public static int mulLoop(int a, int b) {
        int res = 0;
 
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ decreases b - i;
            for(int i = 0; i < b; i++) {
                res = res - a;  // changed the operator from + to -
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ decreases -b - i;
            for(int i = 0; i < -b; i++) {
                res = res + a;  // changed the operator from - to +
            }
        }
        return res;
    }
}

==============================

==============================
