public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n > 0 && (\exists int k; 0 <= k && k <= 31; n == Math.pow(2, k));
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != Math.pow(2, k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}
==============================
error: An error while executing a proof script for isPowerOfTwo: (error "expecting bit-vector terms")
1 error

==============================
public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n > 0 && (\exists int k; 0 <= k && k <= 31; n == (1 << k));
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != (1 << k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}
==============================
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2:) in method isPowerOfTwo
        return true;
        ^
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2: verify: Associated declaration: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11:
    //@ ensures \result ==> n > 0 && (\exists int k; 0 <= k && k <= 31; n == (1 << k));
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n > 0 && (\exists int k; 0 < k && k < 31; n == (1 << k));  
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != (1 << k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

==============================
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2:) in method isPowerOfTwo
        return true;
        ^
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2: verify: Associated declaration: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11:
    //@ ensures \result ==> n > 0 && (\exists int k; 0 < k && k < 31; n == (1 << k));  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n > 0 && (\exists int k; 0 < k && k <= 31; n == (1 << k));  
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != (1 << k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

==============================
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2:) in method isPowerOfTwo
        return true;
        ^
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2: verify: Associated declaration: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11:
    //@ ensures \result ==> n > 0 && (\exists int k; 0 < k && k <= 31; n == (1 << k));  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n > 0 && (\exists int k; 0 < k && k - 1 <= 31; n == (1 << k));  
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != (1 << k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

==============================
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2:) in method isPowerOfTwo
        return true;
        ^
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2: verify: Associated declaration: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11:
    //@ ensures \result ==> n > 0 && (\exists int k; 0 < k && k - 1 <= 31; n == (1 << k));  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n > 0 && (\exists int k; 0 <= k && k < 31; n == (1 << k));  
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != (1 << k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

==============================
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2:) in method isPowerOfTwo
        return true;
        ^
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2: verify: Associated declaration: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11:
    //@ ensures \result ==> n > 0 && (\exists int k; 0 <= k && k < 31; n == (1 << k));  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n > 0 && (\exists int k; 0 <= k && k <= 31; n == (1 << k));  
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != (1 << k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

==============================
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2:) in method isPowerOfTwo
        return true;
        ^
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2: verify: Associated declaration: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11:
    //@ ensures \result ==> n > 0 && (\exists int k; 0 <= k && k <= 31; n == (1 << k));  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n > 0 && (\exists int k; 0 <= k && k - 1 <= 31; n == (1 << k));  
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != (1 << k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

==============================
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2:) in method isPowerOfTwo
        return true;
        ^
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2: verify: Associated declaration: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11:
    //@ ensures \result ==> n > 0 && (\exists int k; 0 <= k && k - 1 <= 31; n == (1 << k));  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n > 0 && (\exists int k; 0 - 1 <= k && k < 31; n == (1 << k));  
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != (1 << k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

==============================
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2:) in method isPowerOfTwo
        return true;
        ^
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2: verify: Associated declaration: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11:
    //@ ensures \result ==> n > 0 && (\exists int k; 0 - 1 <= k && k < 31; n == (1 << k));  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n > 0 && (\exists int k; 0 - 1 <= k && k <= 31; n == (1 << k));  
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != (1 << k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

==============================
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2:) in method isPowerOfTwo
        return true;
        ^
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2: verify: Associated declaration: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11:
    //@ ensures \result ==> n > 0 && (\exists int k; 0 - 1 <= k && k <= 31; n == (1 << k));  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n > 0 && (\exists int k; 0 - 1 <= k && k - 1 <= 31; n == (1 << k));  
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != (1 << k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

==============================
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2:) in method isPowerOfTwo
        return true;
        ^
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2: verify: Associated declaration: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11:
    //@ ensures \result ==> n > 0 && (\exists int k; 0 - 1 <= k && k - 1 <= 31; n == (1 << k));  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n >= 0 && (\exists int k; 0 < k && k < 31; n == (1 << k));  
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != (1 << k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

==============================
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2:) in method isPowerOfTwo
        return true;
        ^
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2: verify: Associated declaration: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11:
    //@ ensures \result ==> n >= 0 && (\exists int k; 0 < k && k < 31; n == (1 << k));  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n >= 0 && (\exists int k; 0 < k && k <= 31; n == (1 << k));  
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != (1 << k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

==============================
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2:) in method isPowerOfTwo
        return true;
        ^
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2: verify: Associated declaration: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11:
    //@ ensures \result ==> n >= 0 && (\exists int k; 0 < k && k <= 31; n == (1 << k));  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n >= 0 && (\exists int k; 0 < k && k - 1 <= 31; n == (1 << k));  
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != (1 << k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

==============================
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2:) in method isPowerOfTwo
        return true;
        ^
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2: verify: Associated declaration: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11:
    //@ ensures \result ==> n >= 0 && (\exists int k; 0 < k && k - 1 <= 31; n == (1 << k));  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n >= 0 && (\exists int k; 0 <= k && k < 31; n == (1 << k));  
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != (1 << k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

==============================
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2:) in method isPowerOfTwo
        return true;
        ^
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2: verify: Associated declaration: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11:
    //@ ensures \result ==> n >= 0 && (\exists int k; 0 <= k && k < 31; n == (1 << k));  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n >= 0 && (\exists int k; 0 <= k && k <= 31; n == (1 << k));  
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != (1 << k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

==============================
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2:) in method isPowerOfTwo
        return true;
        ^
/root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:2: verify: Associated declaration: /root/082602-gpt-specgen/tmp/PowerOfTwoBranch_Mutant1.java:11:
    //@ ensures \result ==> n >= 0 && (\exists int k; 0 <= k && k <= 31; n == (1 << k));  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant1 {
    //@ ensures \result ==> n >= 0 && (\exists int k; 0 <= k && k - 1 <= 31; n == (1 << k));  
    //@ ensures !\result ==> n <= 0 || (\forall int k; 0 <= k && k <= 31; n != (1 << k));
    public static boolean isPowerOfTwo(int n) {
        if (n < 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }
}

==============================

==============================
